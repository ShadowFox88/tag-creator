---
import Input from "@/components/input.astro";
import Layout from "@/layouts/base.astro";
---

<script>
    const VALID_CLASS = "btn-success";
    const INVALID_CLASS = "btn-error";
    const DEFAULT_GENERATE_BUTTON_TEXT = "Generate & Copy";
    const CODE_BLOCK_PATTERN = /```(?<language>[a-z]{2,})?\s*(?<content>(?:.+\s*(?!```))+)\s*```/g;
    const BACKTICKS = "```";
    const tagCreatorElement = document.getElementById("tag-creator") as HTMLFormElement;
    const nameElement = document.getElementById("name") as HTMLInputElement;
    const commandElement = document.getElementById("command") as HTMLInputElement;
    const contentElement = document.getElementById("content") as HTMLTextAreaElement;
    const mediaURLElement = document.getElementById("media") as HTMLInputElement;
    const generateButton = document.getElementById("generate") as HTMLButtonElement;
    let uploading = false;
    let changeGenerateButtonTextTask: number | null = null;

    interface GenerateOutputProperties {
        name: string;
        command: string;
        content: string;
        mediaURL: string;
    }

    const processCodeblocks = (content: string) => {
        let parsed = content;

        for (const [match] of content.matchAll(CODE_BLOCK_PATTERN)) {
            parsed = parsed.replace(match, `${BACKTICKS}\n${match}`);
        }

        return parsed;
    };

    const generateOutput = (properties: GenerateOutputProperties) => {
        const processedContent = processCodeblocks(properties.content);
        const DETAILS = {
            Name: properties.name,
            Command: properties.command,
            Content: processedContent,
            Media: properties.mediaURL,
        };
        const preProcessed = Object.entries(DETAILS)
            .filter(([, value]) => value)
            .map(([detail, value]) => `Tag ${detail}: ${value}`)
            .join("\n");
        const appendage = preProcessed.endsWith(BACKTICKS) ? "" : BACKTICKS;

        return preProcessed
            ? `${BACKTICKS}\n${preProcessed}\n${appendage}`.trimEnd()
            : preProcessed;
    };

    const sleep = (milliseconds: number) =>
        new Promise(resolve => setTimeout(resolve, milliseconds));

    for (const inputElement of [nameElement, commandElement, contentElement, mediaURLElement]) {
        inputElement.addEventListener("input", () => {
            const isValid =
                tagCreatorElement.checkValidity() &&
                (contentElement.value ||
                    (mediaURLElement.value && mediaURLElement.checkValidity()));

            if (!isValid) {
                generateButton.classList.replace(VALID_CLASS, INVALID_CLASS);

                return;
            }

            generateButton.classList.replace(INVALID_CLASS, VALID_CLASS);
        });
    }

    tagCreatorElement.addEventListener("submit", async event => {
        event.preventDefault();

        if (uploading) {
            return;
        }

        uploading = true;
        const output = generateOutput({
            command: commandElement.value,
            content: contentElement.value,
            mediaURL: mediaURLElement.value,
            name: nameElement.value,
        });

        if (!output) {
            return;
        }

        try {
            await navigator.clipboard.writeText(output);
        } catch (error) {
            if (error instanceof Error) {
                console.error(error.message);
            }
        }

        if (!changeGenerateButtonTextTask) {
            generateButton.textContent = "Copied!";

            changeGenerateButtonTextTask = setTimeout(() => {
                generateButton.textContent = DEFAULT_GENERATE_BUTTON_TEXT;
                changeGenerateButtonTextTask = null;
            }, 3000);
        }

        uploading = false;
    });
</script>

<Layout class="flex h-dvh w-dvw items-center justify-center">
    <div class="box-border flex flex-col gap-2 rounded-xl px-6 py-8 shadow-lg">
        <h1 class="mb-3 text-3xl font-bold">Tag Creator</h1>

        <form class="flex max-w-xs flex-col gap-2" id="tag-creator">
            <Input id="name" placeholder="Name" maxlength="20" type="text" required />
            <Input id="command" placeholder="Command" maxlength="20" type="text" required />
            <textarea
                class="textarea textarea-bordered resize-none text-base"
                rows="3"
                id="content"
                maxlength="1024"
                placeholder="Content"></textarea>
            <Input id="media" placeholder="Media URL" type="url" />

            <button class="btn btn-error" id="generate" type="submit">Generate & Copy</button>
        </form>
    </div>
</Layout>
